name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.24

      - name: Install dependencies
        run: go mod download

      - name: Build application
        run: go build ./...

      - name: Run tests
        run: go test -v ./...

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Semantic Release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github @semantic-release/exec conventional-changelog-conventionalcommits

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npx semantic-release
          RELEASE_VERSION=$(cat release-version.txt || echo "")
          if [ -z "$RELEASE_VERSION" ]; then
            echo "No new release, skipping Docker build."
            echo 'released=false' | tee $GITHUB_OUTPUT
          else
            echo "New release: $RELEASE_VERSION"
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kargo-promotion-check-ext-argo:${{ needs.release.outputs.version }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/kargo-promotion-check-ext-argo:${{ needs.release.outputs.version }} ${{ secrets.DOCKERHUB_USERNAME }}/kargo-promotion-check-ext-argo:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kargo-promotion-check-ext-argo:${{ needs.release.outputs.version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kargo-promotion-check-ext-argo:latest
